[0.000000] (-) TimerEvent: {}
[0.000772] (inertial_sense_ros2) JobQueued: {'identifier': 'inertial_sense_ros2', 'dependencies': OrderedDict()}
[0.003054] (inertial_sense_ros2) JobStarted: {'identifier': 'inertial_sense_ros2'}
[0.037558] (inertial_sense_ros2) JobProgress: {'identifier': 'inertial_sense_ros2', 'progress': 'cmake'}
[0.041279] (inertial_sense_ros2) JobProgress: {'identifier': 'inertial_sense_ros2', 'progress': 'build'}
[0.043793] (inertial_sense_ros2) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/s/Inertial_Sense/imx/SDK/ros2/build/inertial_sense_ros2', '--', '-j6', '-l6'], 'cwd': '/home/s/Inertial_Sense/imx/SDK/ros2/build/inertial_sense_ros2', 'env': OrderedDict({'LESSOPEN': '| /usr/bin/lesspipe %s', 'USER': 's', 'XDG_SESSION_TYPE': 'wayland', 'SHLVL': '1', 'LD_LIBRARY_PATH': '/opt/ros/jazzy/opt/rviz_ogre_vendor/lib:/opt/ros/jazzy/lib/x86_64-linux-gnu:/opt/ros/jazzy/opt/gz_math_vendor/lib:/opt/ros/jazzy/opt/gz_utils_vendor/lib:/opt/ros/jazzy/opt/gz_cmake_vendor/lib:/opt/ros/jazzy/lib', 'HOME': '/home/s', 'DESKTOP_SESSION': 'ubuntu', 'ROS_PYTHON_VERSION': '3', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'GTK_MODULES': 'gail:atk-bridge', 'DBUS_STARTER_BUS_TYPE': 'session', 'SYSTEMD_EXEC_PID': '2214', 'GSM_SKIP_SSH_AGENT_WORKAROUND': 'true', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus,guid=f924f768626b8f5ddd4065286697eb5b', 'COLORTERM': 'truecolor', '_colcon_cd_root': '/opt/ros/jazzy/', 'DEBUGINFOD_URLS': 'https://debuginfod.ubuntu.com', 'IM_CONFIG_PHASE': '1', 'WAYLAND_DISPLAY': 'wayland-0', 'ROS_DISTRO': 'jazzy', 'LOGNAME': 's', '_': '/usr/bin/colcon', 'ROS_VERSION': '2', 'MEMORY_PRESSURE_WATCH': '/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/app.slice/app-gnome\\x2dsession\\x2dmanager.slice/gnome-session-manager@ubuntu.service/memory.pressure', 'XDG_SESSION_CLASS': 'user', 'USERNAME': 's', 'TERM': 'xterm-256color', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'PATH': '/opt/ros/jazzy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin', 'SESSION_MANAGER': 'local/s-VMware-Virtual-Platform:@/tmp/.ICE-unix/2214,unix/s-VMware-Virtual-Platform:/tmp/.ICE-unix/2214', 'XDG_MENU_PREFIX': 'gnome-', 'GNOME_TERMINAL_SCREEN': '/org/gnome/Terminal/screen/ee79ed63_56cc_414c_b474_a4da542e6115', 'GNOME_SETUP_DISPLAY': ':1', 'XDG_RUNTIME_DIR': '/run/user/1000', 'DISPLAY': ':0', 'LANG': 'en_US.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'XMODIFIERS': '@im=ibus', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XAUTHORITY': '/run/user/1000/.mutter-Xwaylandauth.MAC8Q2', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:', 'GNOME_TERMINAL_SERVICE': ':1.120', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'ROS_DOMAIN_ID': '0', 'AMENT_PREFIX_PATH': '/opt/ros/jazzy', 'SHELL': '/bin/bash', 'QT_ACCESSIBILITY': '1', 'GDMSESSION': 'ubuntu', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'ROS_AUTOMATIC_DISCOVERY_RANGE': 'SUBNET', 'QT_IM_MODULE': 'ibus', 'PWD': '/home/s/Inertial_Sense/imx/SDK/ros2/build/inertial_sense_ros2', 'LC_ALL': 'en_US.UTF-8', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'DBUS_STARTER_ADDRESS': 'unix:path=/run/user/1000/bus,guid=f924f768626b8f5ddd4065286697eb5b', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'QTWEBENGINE_DICTIONARIES_PATH': '/usr/share/hunspell-bdic/', 'PYTHONPATH': '/opt/ros/jazzy/lib/python3.12/site-packages', 'COLCON': '1', 'MEMORY_PRESSURE_WRITE': 'c29tZSAyMDAwMDAgMjAwMDAwMAA=', 'VTE_VERSION': '7600', 'CMAKE_PREFIX_PATH': '/opt/ros/jazzy/opt/gz_math_vendor:/opt/ros/jazzy/opt/gz_utils_vendor:/opt/ros/jazzy/opt/gz_cmake_vendor:/opt/ros/jazzy'}), 'shell': False}
[0.099854] (-) TimerEvent: {}
[0.200444] (-) TimerEvent: {}
[0.301843] (-) TimerEvent: {}
[0.373925] (inertial_sense_ros2) StdoutLine: {'line': b'[  1%] Built target inertial_sense_ros2__rosidl_generator_type_description\n'}
[0.402093] (-) TimerEvent: {}
[0.429975] (inertial_sense_ros2) StdoutLine: {'line': b'[  1%] Built target ament_cmake_python_copy_inertial_sense_ros2\n'}
[0.481236] (inertial_sense_ros2) StdoutLine: {'line': b'[  1%] Built target inertial_sense_ros2__cpp\n'}
[0.502416] (-) TimerEvent: {}
[0.530888] (inertial_sense_ros2) StdoutLine: {'line': b'[ 27%] Built target inertial_sense_ros2__rosidl_generator_c\n'}
[0.552587] (inertial_sense_ros2) StdoutLine: {'line': b'[ 28%] Building CXX object CMakeFiles/new_target.dir/src/inertial_sense_ros2.cpp.o\n'}
[0.553157] (inertial_sense_ros2) StdoutLine: {'line': b'[ 28%] Building CXX object CMakeFiles/new_target.dir/src/inertial_sense_node.cpp.o\n'}
[0.602618] (-) TimerEvent: {}
[0.687643] (inertial_sense_ros2) StdoutLine: {'line': b'[ 38%] Built target inertial_sense_ros2__rosidl_typesupport_cpp\n'}
[0.702826] (-) TimerEvent: {}
[0.710281] (inertial_sense_ros2) StdoutLine: {'line': b'[ 47%] Built target inertial_sense_ros2__rosidl_typesupport_fastrtps_cpp\n'}
[0.746151] (inertial_sense_ros2) StdoutLine: {'line': b'[ 57%] Built target inertial_sense_ros2__rosidl_typesupport_fastrtps_c\n'}
[0.806246] (-) TimerEvent: {}
[0.845669] (inertial_sense_ros2) StdoutLine: {'line': b'[ 72%] Built target inertial_sense_ros2__rosidl_typesupport_c\n'}
[0.846526] (inertial_sense_ros2) StdoutLine: {'line': b'[ 76%] Built target inertial_sense_ros2__rosidl_typesupport_introspection_c\n'}
[0.895932] (inertial_sense_ros2) StdoutLine: {'line': b'[ 85%] Built target inertial_sense_ros2__rosidl_typesupport_introspection_cpp\n'}
[0.906411] (-) TimerEvent: {}
[1.004405] (inertial_sense_ros2) StdoutLine: {'line': b'[ 85%] Built target inertial_sense_ros2\n'}
[1.006636] (-) TimerEvent: {}
[1.109331] (-) TimerEvent: {}
[1.121148] (inertial_sense_ros2) StdoutLine: {'line': b'[ 86%] Built target inertial_sense_ros2__py\n'}
[1.209854] (-) TimerEvent: {}
[1.259606] (inertial_sense_ros2) StdoutLine: {'line': b'[ 95%] Built target inertial_sense_ros2__rosidl_generator_py\n'}
[1.310215] (-) TimerEvent: {}
[1.414277] (-) TimerEvent: {}
[1.419209] (inertial_sense_ros2) StdoutLine: {'line': b'[ 96%] Built target inertial_sense_ros2_s__rosidl_typesupport_introspection_c\n'}
[1.438697] (inertial_sense_ros2) StdoutLine: {'line': b'[ 97%] Built target inertial_sense_ros2_s__rosidl_typesupport_fastrtps_c\n'}
[1.442244] (inertial_sense_ros2) StdoutLine: {'line': b'[ 98%] Built target inertial_sense_ros2_s__rosidl_typesupport_c\n'}
[1.489494] (inertial_sense_ros2) StdoutLine: {'line': b'running egg_info\n'}
[1.514454] (-) TimerEvent: {}
[1.604575] (inertial_sense_ros2) StdoutLine: {'line': b'writing inertial_sense_ros2.egg-info/PKG-INFO\n'}
[1.606382] (inertial_sense_ros2) StdoutLine: {'line': b'writing dependency_links to inertial_sense_ros2.egg-info/dependency_links.txt\n'}
[1.610272] (inertial_sense_ros2) StdoutLine: {'line': b'writing top-level names to inertial_sense_ros2.egg-info/top_level.txt\n'}
[1.614619] (-) TimerEvent: {}
[1.714967] (-) TimerEvent: {}
[1.815359] (-) TimerEvent: {}
[1.883087] (inertial_sense_ros2) StdoutLine: {'line': b"reading manifest file 'inertial_sense_ros2.egg-info/SOURCES.txt'\n"}
[1.887272] (inertial_sense_ros2) StdoutLine: {'line': b"writing manifest file 'inertial_sense_ros2.egg-info/SOURCES.txt'\n"}
[1.918269] (-) TimerEvent: {}
[2.018650] (-) TimerEvent: {}
[2.020224] (inertial_sense_ros2) StdoutLine: {'line': b'[ 98%] Built target ament_cmake_python_build_inertial_sense_ros2_egg\n'}
[2.118835] (-) TimerEvent: {}
[2.219266] (-) TimerEvent: {}
[2.319826] (-) TimerEvent: {}
[2.420384] (-) TimerEvent: {}
[2.520929] (-) TimerEvent: {}
[2.621508] (-) TimerEvent: {}
[2.722022] (-) TimerEvent: {}
[2.828493] (-) TimerEvent: {}
[2.929169] (-) TimerEvent: {}
[3.031325] (-) TimerEvent: {}
[3.131759] (-) TimerEvent: {}
[3.232363] (-) TimerEvent: {}
[3.332877] (-) TimerEvent: {}
[3.433505] (-) TimerEvent: {}
[3.534432] (-) TimerEvent: {}
[3.635015] (-) TimerEvent: {}
[3.738487] (-) TimerEvent: {}
[3.839434] (-) TimerEvent: {}
[3.939819] (-) TimerEvent: {}
[4.040318] (-) TimerEvent: {}
[4.140769] (-) TimerEvent: {}
[4.241387] (-) TimerEvent: {}
[4.341841] (-) TimerEvent: {}
[4.442466] (-) TimerEvent: {}
[4.543005] (-) TimerEvent: {}
[4.643654] (-) TimerEvent: {}
[4.744239] (-) TimerEvent: {}
[4.844788] (-) TimerEvent: {}
[4.945354] (-) TimerEvent: {}
[5.045895] (-) TimerEvent: {}
[5.146519] (-) TimerEvent: {}
[5.247064] (-) TimerEvent: {}
[5.347720] (-) TimerEvent: {}
[5.448253] (-) TimerEvent: {}
[5.548781] (-) TimerEvent: {}
[5.649252] (-) TimerEvent: {}
[5.752271] (-) TimerEvent: {}
[5.852934] (-) TimerEvent: {}
[5.953518] (-) TimerEvent: {}
[6.054063] (-) TimerEvent: {}
[6.154738] (-) TimerEvent: {}
[6.255262] (-) TimerEvent: {}
[6.355903] (-) TimerEvent: {}
[6.456472] (-) TimerEvent: {}
[6.557045] (-) TimerEvent: {}
[6.657634] (-) TimerEvent: {}
[6.758033] (-) TimerEvent: {}
[6.858832] (-) TimerEvent: {}
[6.959328] (-) TimerEvent: {}
[7.059892] (-) TimerEvent: {}
[7.160468] (-) TimerEvent: {}
[7.260944] (-) TimerEvent: {}
[7.361573] (-) TimerEvent: {}
[7.462299] (-) TimerEvent: {}
[7.562861] (-) TimerEvent: {}
[7.663366] (-) TimerEvent: {}
[7.763880] (-) TimerEvent: {}
[7.864640] (-) TimerEvent: {}
[7.968589] (-) TimerEvent: {}
[8.071262] (-) TimerEvent: {}
[8.171649] (-) TimerEvent: {}
[8.272255] (-) TimerEvent: {}
[8.372860] (-) TimerEvent: {}
[8.475481] (-) TimerEvent: {}
[8.578267] (-) TimerEvent: {}
[8.678778] (-) TimerEvent: {}
[8.779954] (-) TimerEvent: {}
[8.880458] (-) TimerEvent: {}
[8.981293] (-) TimerEvent: {}
[9.081756] (-) TimerEvent: {}
[9.182338] (-) TimerEvent: {}
[9.282868] (-) TimerEvent: {}
[9.383545] (-) TimerEvent: {}
[9.484545] (-) TimerEvent: {}
[9.585636] (-) TimerEvent: {}
[9.686096] (-) TimerEvent: {}
[9.786904] (-) TimerEvent: {}
[9.887275] (-) TimerEvent: {}
[9.987770] (-) TimerEvent: {}
[10.088824] (-) TimerEvent: {}
[10.189259] (-) TimerEvent: {}
[10.291056] (-) TimerEvent: {}
[10.391787] (-) TimerEvent: {}
[10.492280] (-) TimerEvent: {}
[10.592832] (-) TimerEvent: {}
[10.693314] (-) TimerEvent: {}
[10.793808] (-) TimerEvent: {}
[10.894380] (-) TimerEvent: {}
[10.994950] (-) TimerEvent: {}
[11.095388] (-) TimerEvent: {}
[11.195819] (-) TimerEvent: {}
[11.296324] (-) TimerEvent: {}
[11.396925] (-) TimerEvent: {}
[11.497509] (-) TimerEvent: {}
[11.598098] (-) TimerEvent: {}
[11.698694] (-) TimerEvent: {}
[11.799250] (-) TimerEvent: {}
[11.899806] (-) TimerEvent: {}
[12.000373] (-) TimerEvent: {}
[12.100897] (-) TimerEvent: {}
[12.201351] (-) TimerEvent: {}
[12.301853] (-) TimerEvent: {}
[12.402371] (-) TimerEvent: {}
[12.502943] (-) TimerEvent: {}
[12.603566] (-) TimerEvent: {}
[12.704073] (-) TimerEvent: {}
[12.804649] (-) TimerEvent: {}
[12.905326] (-) TimerEvent: {}
[13.005783] (-) TimerEvent: {}
[13.106328] (-) TimerEvent: {}
[13.206822] (-) TimerEvent: {}
[13.307387] (-) TimerEvent: {}
[13.407878] (-) TimerEvent: {}
[13.508381] (-) TimerEvent: {}
[13.608931] (-) TimerEvent: {}
[13.709556] (-) TimerEvent: {}
[13.810077] (-) TimerEvent: {}
[13.910803] (-) TimerEvent: {}
[14.011400] (-) TimerEvent: {}
[14.112008] (-) TimerEvent: {}
[14.212597] (-) TimerEvent: {}
[14.313184] (-) TimerEvent: {}
[14.413792] (-) TimerEvent: {}
[14.514384] (-) TimerEvent: {}
[14.614910] (-) TimerEvent: {}
[14.715371] (-) TimerEvent: {}
[14.816358] (-) TimerEvent: {}
[14.917397] (-) TimerEvent: {}
[15.018030] (-) TimerEvent: {}
[15.118720] (-) TimerEvent: {}
[15.219256] (-) TimerEvent: {}
[15.319815] (-) TimerEvent: {}
[15.420409] (-) TimerEvent: {}
[15.521043] (-) TimerEvent: {}
[15.621786] (-) TimerEvent: {}
[15.722277] (-) TimerEvent: {}
[15.822795] (-) TimerEvent: {}
[15.925269] (-) TimerEvent: {}
[16.025729] (-) TimerEvent: {}
[16.126215] (-) TimerEvent: {}
[16.226650] (-) TimerEvent: {}
[16.327264] (-) TimerEvent: {}
[16.427731] (-) TimerEvent: {}
[16.528349] (-) TimerEvent: {}
[16.628811] (-) TimerEvent: {}
[16.729275] (-) TimerEvent: {}
[16.829708] (-) TimerEvent: {}
[16.930226] (-) TimerEvent: {}
[17.030739] (-) TimerEvent: {}
[17.131301] (-) TimerEvent: {}
[17.231851] (-) TimerEvent: {}
[17.332493] (-) TimerEvent: {}
[17.433059] (-) TimerEvent: {}
[17.533699] (-) TimerEvent: {}
[17.634350] (-) TimerEvent: {}
[17.734904] (-) TimerEvent: {}
[17.835332] (-) TimerEvent: {}
[17.935952] (-) TimerEvent: {}
[18.036598] (-) TimerEvent: {}
[18.137275] (-) TimerEvent: {}
[18.237808] (-) TimerEvent: {}
[18.338412] (-) TimerEvent: {}
[18.438971] (-) TimerEvent: {}
[18.539541] (-) TimerEvent: {}
[18.640093] (-) TimerEvent: {}
[18.740675] (-) TimerEvent: {}
[18.841382] (-) TimerEvent: {}
[18.941915] (-) TimerEvent: {}
[19.042542] (-) TimerEvent: {}
[19.143082] (-) TimerEvent: {}
[19.243692] (-) TimerEvent: {}
[19.344237] (-) TimerEvent: {}
[19.357903] (inertial_sense_ros2) StderrLine: {'line': b'In file included from /opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:37,\n'}
[19.359476] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:28,\n'}
[19.359942] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/any_executable.hpp:20,\n'}
[19.361360] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategy.hpp:25,\n'}
[19.362787] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategies.hpp:18,\n'}
[19.363045] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/executor_options.hpp:22,\n'}
[19.363469] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/executor.hpp:38,\n'}
[19.363846] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25,\n'}
[19.364150] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/executors.hpp:21,\n'}
[19.364456] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/rclcpp.hpp:172,\n'}
[19.364727] (inertial_sense_ros2) StderrLine: {'line': b'                 from /home/s/Inertial_Sense/imx/SDK/ros2/include/TopicHelper.h:25,\n'}
[19.364969] (inertial_sense_ros2) StderrLine: {'line': b'                 from /home/s/Inertial_Sense/imx/SDK/ros2/include/inertial_sense_ros2.h:29,\n'}
[19.365375] (inertial_sense_ros2) StderrLine: {'line': b'                 from /home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_node.cpp:19:\n'}
[19.365649] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99:\n'}
[19.365942] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.366301] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.366602] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.366878] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:130:82:   required from here\n'}
[19.367177] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17: error: no match for \xe2\x80\x98operator=\xe2\x80\x99 (operand types are \xe2\x80\x98std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >\xe2\x80\x99 and \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>\xe2\x80\x99)\n'}
[19.367473] (inertial_sense_ros2) StderrLine: {'line': b'  103 |       callback_ = std::forward<CallbackT>(callback);\n'}
[19.367706] (inertial_sense_ros2) StderrLine: {'line': b'      |       ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'}
[19.367945] (inertial_sense_ros2) StderrLine: {'line': b'In file included from /opt/ros/jazzy/include/rclcpp/rclcpp/client.hpp:29,\n'}
[19.368230] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:24:\n'}
[19.368481] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1494:9: note: candidate: \xe2\x80\x98template<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.368798] (inertial_sense_ros2) StderrLine: {'line': b' 1494 |         operator=(_Tp&& __rhs)\n'}
[19.369035] (inertial_sense_ros2) StderrLine: {'line': b'      |         ^~~~~~~~\n'}
[19.369325] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1494:9: note:   template argument deduction/substitution failed:\n'}
[19.369713] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant: In substitution of \xe2\x80\x98template<class ... _Types> template<class _Tp, class> using std::variant<_Types>::__accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>&&; <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99:\n'}
[19.369978] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1490:14:   required by substitution of \xe2\x80\x98template<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::operator=(_Tp&&) [with _Tp = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>]\xe2\x80\x99\n'}
[19.370608] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:   required from \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99\n'}
[19.370930] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.371307] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.371611] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.371877] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:130:82:   required from here\n'}
[19.372147] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1407:15: error: no type named \xe2\x80\x98type\xe2\x80\x99 in \xe2\x80\x98struct std::enable_if<false, void>\xe2\x80\x99\n'}
[19.372398] (inertial_sense_ros2) StderrLine: {'line': b' 1407 |         using __accepted_type = __to_type<__accepted_index<_Tp>>;\n'}
[19.372630] (inertial_sense_ros2) StderrLine: {'line': b'      |               ^~~~~~~~~~~~~~~\n'}
[19.372875] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99:\n'}
[19.373171] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.373449] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.373721] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.374016] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:130:82:   required from here\n'}
[19.374322] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1430:16: note: candidate: \xe2\x80\x98std::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.374606] (inertial_sense_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(const variant&) = default;\n'}
[19.374845] (inertial_sense_ros2) StderrLine: {'line': b'      |                ^~~~~~~~\n'}
[19.375093] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1430:26: note:   no known conversion for argument 1 from \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>\xe2\x80\x99 to \xe2\x80\x98const std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&\xe2\x80\x99\n'}
[19.375641] (inertial_sense_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(const variant&) = default;\n'}
[19.375891] (inertial_sense_ros2) StderrLine: {'line': b'      |                          ^~~~~~~~~~~~~~\n'}
[19.376168] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1431:16: note: candidate: \xe2\x80\x98std::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.376447] (inertial_sense_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(variant&&) = default;\n'}
[19.376686] (inertial_sense_ros2) StderrLine: {'line': b'      |                ^~~~~~~~\n'}
[19.376925] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1431:26: note:   no known conversion for argument 1 from \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>\xe2\x80\x99 to \xe2\x80\x98std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&&\xe2\x80\x99\n'}
[19.377412] (inertial_sense_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(variant&&) = default;\n'}
[19.377699] (inertial_sense_ros2) StderrLine: {'line': b'      |                          ^~~~~~~~~\n'}
[19.388508] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99:\n'}
[19.389556] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.391084] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.391580] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.391859] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:131:82:   required from here\n'}
[19.392104] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17: error: no match for \xe2\x80\x98operator=\xe2\x80\x99 (operand types are \xe2\x80\x98std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >\xe2\x80\x99 and \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>\xe2\x80\x99)\n'}
[19.392525] (inertial_sense_ros2) StderrLine: {'line': b'  103 |       callback_ = std::forward<CallbackT>(callback);\n'}
[19.392791] (inertial_sense_ros2) StderrLine: {'line': b'      |       ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'}
[19.393031] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1494:9: note: candidate: \xe2\x80\x98template<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.393373] (inertial_sense_ros2) StderrLine: {'line': b' 1494 |         operator=(_Tp&& __rhs)\n'}
[19.393616] (inertial_sense_ros2) StderrLine: {'line': b'      |         ^~~~~~~~\n'}
[19.394123] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1494:9: note:   template argument deduction/substitution failed:\n'}
[19.394848] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant: In substitution of \xe2\x80\x98template<class ... _Types> template<class _Tp, class> using std::variant<_Types>::__accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99:\n'}
[19.395473] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1490:14:   required by substitution of \xe2\x80\x98template<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::operator=(_Tp&&) [with _Tp = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>]\xe2\x80\x99\n'}
[19.396085] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:   required from \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99\n'}
[19.397277] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.397733] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.398160] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.398618] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:131:82:   required from here\n'}
[19.398968] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1407:15: error: no type named \xe2\x80\x98type\xe2\x80\x99 in \xe2\x80\x98struct std::enable_if<false, void>\xe2\x80\x99\n'}
[19.399367] (inertial_sense_ros2) StderrLine: {'line': b' 1407 |         using __accepted_type = __to_type<__accepted_index<_Tp>>;\n'}
[19.399727] (inertial_sense_ros2) StderrLine: {'line': b'      |               ^~~~~~~~~~~~~~~\n'}
[19.400074] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99:\n'}
[19.400552] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.401148] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.401622] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.402017] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:131:82:   required from here\n'}
[19.402467] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1430:16: note: candidate: \xe2\x80\x98std::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.402874] (inertial_sense_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(const variant&) = default;\n'}
[19.403302] (inertial_sense_ros2) StderrLine: {'line': b'      |                ^~~~~~~~\n'}
[19.403670] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1430:26: note:   no known conversion for argument 1 from \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>\xe2\x80\x99 to \xe2\x80\x98const std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&\xe2\x80\x99\n'}
[19.404031] (inertial_sense_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(const variant&) = default;\n'}
[19.404419] (inertial_sense_ros2) StderrLine: {'line': b'      |                          ^~~~~~~~~~~~~~\n'}
[19.404745] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1431:16: note: candidate: \xe2\x80\x98std::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.405087] (inertial_sense_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(variant&&) = default;\n'}
[19.405500] (inertial_sense_ros2) StderrLine: {'line': b'      |                ^~~~~~~~\n'}
[19.405843] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1431:26: note:   no known conversion for argument 1 from \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>\xe2\x80\x99 to \xe2\x80\x98std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&&\xe2\x80\x99\n'}
[19.406288] (inertial_sense_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(variant&&) = default;\n'}
[19.406640] (inertial_sense_ros2) StderrLine: {'line': b'      |                          ^~~~~~~~~\n'}
[19.444466] (-) TimerEvent: {}
[19.544997] (-) TimerEvent: {}
[19.645590] (-) TimerEvent: {}
[19.746187] (-) TimerEvent: {}
[19.771279] (inertial_sense_ros2) StderrLine: {'line': b'In file included from /opt/ros/jazzy/include/rclcpp/rclcpp/service.hpp:37,\n'}
[19.771874] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:28,\n'}
[19.772331] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/any_executable.hpp:20,\n'}
[19.772725] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategy.hpp:25,\n'}
[19.776542] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/memory_strategies.hpp:18,\n'}
[19.778201] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/executor_options.hpp:22,\n'}
[19.779999] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/executor.hpp:38,\n'}
[19.780694] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25,\n'}
[19.781043] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/executors.hpp:21,\n'}
[19.781390] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/rclcpp.hpp:172,\n'}
[19.781675] (inertial_sense_ros2) StderrLine: {'line': b'                 from /home/s/Inertial_Sense/imx/SDK/ros2/include/TopicHelper.h:25,\n'}
[19.781947] (inertial_sense_ros2) StderrLine: {'line': b'                 from /home/s/Inertial_Sense/imx/SDK/ros2/include/inertial_sense_ros2.h:29,\n'}
[19.782252] (inertial_sense_ros2) StderrLine: {'line': b'                 from /home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:19:\n'}
[19.782537] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99:\n'}
[19.782841] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.783188] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.783626] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.783944] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:130:82:   required from here\n'}
[19.784263] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17: error: no match for \xe2\x80\x98operator=\xe2\x80\x99 (operand types are \xe2\x80\x98std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >\xe2\x80\x99 and \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>\xe2\x80\x99)\n'}
[19.784622] (inertial_sense_ros2) StderrLine: {'line': b'  103 |       callback_ = std::forward<CallbackT>(callback);\n'}
[19.784885] (inertial_sense_ros2) StderrLine: {'line': b'      |       ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'}
[19.785188] (inertial_sense_ros2) StderrLine: {'line': b'In file included from /opt/ros/jazzy/include/rclcpp/rclcpp/client.hpp:29,\n'}
[19.785465] (inertial_sense_ros2) StderrLine: {'line': b'                 from /opt/ros/jazzy/include/rclcpp/rclcpp/callback_group.hpp:24:\n'}
[19.785718] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1494:9: note: candidate: \xe2\x80\x98template<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.788519] (inertial_sense_ros2) StderrLine: {'line': b' 1494 |         operator=(_Tp&& __rhs)\n'}
[19.788835] (inertial_sense_ros2) StderrLine: {'line': b'      |         ^~~~~~~~\n'}
[19.789093] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1494:9: note:   template argument deduction/substitution failed:\n'}
[19.789417] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant: In substitution of \xe2\x80\x98template<class ... _Types> template<class _Tp, class> using std::variant<_Types>::__accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>&&; <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99:\n'}
[19.789862] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1490:14:   required by substitution of \xe2\x80\x98template<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::operator=(_Tp&&) [with _Tp = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>]\xe2\x80\x99\n'}
[19.790340] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:   required from \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99\n'}
[19.790653] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.790960] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.791489] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.791787] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:130:82:   required from here\n'}
[19.792085] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1407:15: error: no type named \xe2\x80\x98type\xe2\x80\x99 in \xe2\x80\x98struct std::enable_if<false, void>\xe2\x80\x99\n'}
[19.792416] (inertial_sense_ros2) StderrLine: {'line': b' 1407 |         using __accepted_type = __to_type<__accepted_index<_Tp>>;\n'}
[19.792706] (inertial_sense_ros2) StderrLine: {'line': b'      |               ^~~~~~~~~~~~~~~\n'}
[19.792965] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99:\n'}
[19.793282] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.793580] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.802980] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.803536] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:130:82:   required from here\n'}
[19.807357] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1430:16: note: candidate: \xe2\x80\x98std::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.807901] (inertial_sense_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(const variant&) = default;\n'}
[19.808386] (inertial_sense_ros2) StderrLine: {'line': b'      |                ^~~~~~~~\n'}
[19.808785] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1430:26: note:   no known conversion for argument 1 from \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>\xe2\x80\x99 to \xe2\x80\x98const std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&\xe2\x80\x99\n'}
[19.812363] (inertial_sense_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(const variant&) = default;\n'}
[19.812875] (inertial_sense_ros2) StderrLine: {'line': b'      |                          ^~~~~~~~~~~~~~\n'}
[19.813308] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1431:16: note: candidate: \xe2\x80\x98std::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.813773] (inertial_sense_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(variant&&) = default;\n'}
[19.814201] (inertial_sense_ros2) StderrLine: {'line': b'      |                ^~~~~~~~\n'}
[19.814621] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1431:26: note:   no known conversion for argument 1 from \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >, std_srvs::srv::Trigger_Response_<std::allocator<void> >)>\xe2\x80\x99 to \xe2\x80\x98std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&&\xe2\x80\x99\n'}
[19.814992] (inertial_sense_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(variant&&) = default;\n'}
[19.818682] (inertial_sense_ros2) StderrLine: {'line': b'      |                          ^~~~~~~~~\n'}
[19.819100] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99:\n'}
[19.819596] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.820039] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.820534] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.822736] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:131:82:   required from here\n'}
[19.823282] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17: error: no match for \xe2\x80\x98operator=\xe2\x80\x99 (operand types are \xe2\x80\x98std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >\xe2\x80\x99 and \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>\xe2\x80\x99)\n'}
[19.823750] (inertial_sense_ros2) StderrLine: {'line': b'  103 |       callback_ = std::forward<CallbackT>(callback);\n'}
[19.824268] (inertial_sense_ros2) StderrLine: {'line': b'      |       ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'}
[19.824574] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1494:9: note: candidate: \xe2\x80\x98template<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.824971] (inertial_sense_ros2) StderrLine: {'line': b' 1494 |         operator=(_Tp&& __rhs)\n'}
[19.827164] (inertial_sense_ros2) StderrLine: {'line': b'      |         ^~~~~~~~\n'}
[19.827488] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1494:9: note:   template argument deduction/substitution failed:\n'}
[19.827769] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant: In substitution of \xe2\x80\x98template<class ... _Types> template<class _Tp, class> using std::variant<_Types>::__accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99:\n'}
[19.828415] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1490:14:   required by substitution of \xe2\x80\x98template<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >::operator=(_Tp&&) [with _Tp = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>]\xe2\x80\x99\n'}
[19.828905] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:   required from \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99\n'}
[19.829278] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.829587] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.829901] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.830207] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:131:82:   required from here\n'}
[19.830470] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1407:15: error: no type named \xe2\x80\x98type\xe2\x80\x99 in \xe2\x80\x98struct std::enable_if<false, void>\xe2\x80\x99\n'}
[19.830748] (inertial_sense_ros2) StderrLine: {'line': b' 1407 |         using __accepted_type = __to_type<__accepted_index<_Tp>>;\n'}
[19.831002] (inertial_sense_ros2) StderrLine: {'line': b'      |               ^~~~~~~~~~~~~~~\n'}
[19.831303] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98void rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = std_srvs::srv::Trigger]\xe2\x80\x99:\n'}
[19.832931] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:69:27:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const rmw_qos_profile_t&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.833324] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/create_service.hpp:51:45:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<node_interfaces::NodeBaseInterface>, std::shared_ptr<node_interfaces::NodeServicesInterface>, const std::string&, CallbackT&&, const QoS&, CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename Service<ServiceT>::SharedPtr = std::shared_ptr<Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; CallbackGroup::SharedPtr = std::shared_ptr<CallbackGroup>]\xe2\x80\x99\n'}
[19.833656] (inertial_sense_ros2) StderrLine: {'line': b'/opt/ros/jazzy/include/rclcpp/rclcpp/node_impl.hpp:181:53:   required from \xe2\x80\x98typename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const std::string&, CallbackT&&, const rclcpp::QoS&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = std_srvs::srv::Trigger; CallbackT = std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >; std::string = std::__cxx11::basic_string<char>; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\xe2\x80\x99\n'}
[19.833951] (inertial_sense_ros2) StderrLine: {'line': b'/home/s/Inertial_Sense/imx/SDK/ros2/src/inertial_sense_ros2.cpp:131:82:   required from here\n'}
[19.834283] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1430:16: note: candidate: \xe2\x80\x98std::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.834580] (inertial_sense_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(const variant&) = default;\n'}
[19.834860] (inertial_sense_ros2) StderrLine: {'line': b'      |                ^~~~~~~~\n'}
[19.836425] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1430:26: note:   no known conversion for argument 1 from \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>\xe2\x80\x99 to \xe2\x80\x98const std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&\xe2\x80\x99\n'}
[19.836891] (inertial_sense_ros2) StderrLine: {'line': b' 1430 |       variant& operator=(const variant&) = default;\n'}
[19.837215] (inertial_sense_ros2) StderrLine: {'line': b'      |                          ^~~~~~~~~~~~~~\n'}
[19.837515] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1431:16: note: candidate: \xe2\x80\x98std::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>}]\xe2\x80\x99\n'}
[19.837839] (inertial_sense_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(variant&&) = default;\n'}
[19.838089] (inertial_sense_ros2) StderrLine: {'line': b'      |                ^~~~~~~~\n'}
[19.838385] (inertial_sense_ros2) StderrLine: {'line': b'/usr/include/c++/13/variant:1431:26: note:   no known conversion for argument 1 from \xe2\x80\x98std::_Bind<bool (InertialSenseROS::*(InertialSenseROS*, std::_Placeholder<1>, std::_Placeholder<2>))(std_srvs::srv::Trigger_Request_<std::allocator<void> >&, std_srvs::srv::Trigger_Response_<std::allocator<void> >&)>\xe2\x80\x99 to \xe2\x80\x98std::variant<std::monostate, std::function<void(std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >, std::shared_ptr<std_srvs::srv::Trigger_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<std_srvs::srv::Trigger> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<std_srvs::srv::Trigger_Request_<std::allocator<void> > >)> >&&\xe2\x80\x99\n'}
[19.838694] (inertial_sense_ros2) StderrLine: {'line': b' 1431 |       variant& operator=(variant&&) = default;\n'}
[19.838957] (inertial_sense_ros2) StderrLine: {'line': b'      |                          ^~~~~~~~~\n'}
[19.847592] (-) TimerEvent: {}
[19.949277] (-) TimerEvent: {}
[20.049756] (-) TimerEvent: {}
[20.150319] (-) TimerEvent: {}
[20.250957] (-) TimerEvent: {}
[20.351553] (-) TimerEvent: {}
[20.452188] (-) TimerEvent: {}
[20.552780] (-) TimerEvent: {}
[20.653310] (-) TimerEvent: {}
[20.753976] (-) TimerEvent: {}
[20.854623] (-) TimerEvent: {}
[20.955257] (-) TimerEvent: {}
[21.055802] (-) TimerEvent: {}
[21.156286] (-) TimerEvent: {}
[21.261274] (-) TimerEvent: {}
[21.361633] (-) TimerEvent: {}
[21.461989] (-) TimerEvent: {}
[21.562804] (-) TimerEvent: {}
[21.663515] (-) TimerEvent: {}
[21.764230] (-) TimerEvent: {}
[21.864714] (-) TimerEvent: {}
[21.966500] (-) TimerEvent: {}
[22.067199] (-) TimerEvent: {}
[22.168239] (-) TimerEvent: {}
[22.268726] (-) TimerEvent: {}
[22.369233] (-) TimerEvent: {}
[22.469762] (-) TimerEvent: {}
[22.570406] (-) TimerEvent: {}
[22.671384] (-) TimerEvent: {}
[22.771888] (-) TimerEvent: {}
[22.872700] (-) TimerEvent: {}
[22.973363] (-) TimerEvent: {}
[23.079475] (-) TimerEvent: {}
[23.184344] (-) TimerEvent: {}
[23.287259] (-) TimerEvent: {}
[23.387649] (-) TimerEvent: {}
[23.488100] (-) TimerEvent: {}
[23.588669] (-) TimerEvent: {}
[23.689382] (-) TimerEvent: {}
[23.789991] (-) TimerEvent: {}
[23.890793] (-) TimerEvent: {}
[23.991325] (-) TimerEvent: {}
[24.091894] (-) TimerEvent: {}
[24.192339] (-) TimerEvent: {}
[24.292980] (-) TimerEvent: {}
[24.394267] (-) TimerEvent: {}
[24.494839] (-) TimerEvent: {}
[24.595475] (-) TimerEvent: {}
[24.696076] (-) TimerEvent: {}
[24.796663] (-) TimerEvent: {}
[24.898268] (-) TimerEvent: {}
[24.998750] (-) TimerEvent: {}
[25.099753] (-) TimerEvent: {}
[25.200258] (-) TimerEvent: {}
[25.301245] (-) TimerEvent: {}
[25.402396] (-) TimerEvent: {}
[25.503196] (-) TimerEvent: {}
[25.605551] (-) TimerEvent: {}
[25.706773] (-) TimerEvent: {}
[25.807990] (-) TimerEvent: {}
[25.908611] (-) TimerEvent: {}
[26.012275] (-) TimerEvent: {}
[26.112787] (-) TimerEvent: {}
[26.213284] (-) TimerEvent: {}
[26.313864] (-) TimerEvent: {}
[26.414410] (-) TimerEvent: {}
[26.514949] (-) TimerEvent: {}
[26.615472] (-) TimerEvent: {}
[26.716028] (-) TimerEvent: {}
[26.816604] (-) TimerEvent: {}
[26.917220] (-) TimerEvent: {}
[27.017846] (-) TimerEvent: {}
[27.118354] (-) TimerEvent: {}
[27.218887] (-) TimerEvent: {}
[27.319583] (-) TimerEvent: {}
[27.420192] (-) TimerEvent: {}
[27.520669] (-) TimerEvent: {}
[27.621258] (-) TimerEvent: {}
[27.721758] (-) TimerEvent: {}
[27.822201] (-) TimerEvent: {}
[27.922598] (-) TimerEvent: {}
[28.016892] (inertial_sense_ros2) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/new_target.dir/build.make:90: CMakeFiles/new_target.dir/src/inertial_sense_node.cpp.o] Error 1\n'}
[28.017413] (inertial_sense_ros2) StderrLine: {'line': b'gmake[2]: *** Waiting for unfinished jobs....\n'}
[28.022918] (-) TimerEvent: {}
[28.123342] (-) TimerEvent: {}
[28.223838] (-) TimerEvent: {}
[28.324473] (-) TimerEvent: {}
[28.425062] (-) TimerEvent: {}
[28.511065] (inertial_sense_ros2) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/new_target.dir/build.make:76: CMakeFiles/new_target.dir/src/inertial_sense_ros2.cpp.o] Error 1\n'}
[28.512227] (inertial_sense_ros2) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:623: CMakeFiles/new_target.dir/all] Error 2\n'}
[28.513968] (inertial_sense_ros2) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[28.517333] (inertial_sense_ros2) CommandEnded: {'returncode': 2}
[28.525403] (-) TimerEvent: {}
[28.625820] (-) TimerEvent: {}
[28.726298] (-) TimerEvent: {}
[28.826845] (-) TimerEvent: {}
[28.927453] (-) TimerEvent: {}
[29.027977] (-) TimerEvent: {}
[29.128465] (-) TimerEvent: {}
[29.229394] (-) TimerEvent: {}
[29.329881] (-) TimerEvent: {}
[29.430496] (-) TimerEvent: {}
[29.530951] (-) TimerEvent: {}
[29.631386] (-) TimerEvent: {}
[29.731854] (-) TimerEvent: {}
[29.832426] (-) TimerEvent: {}
[29.932886] (-) TimerEvent: {}
[30.033478] (-) TimerEvent: {}
[30.134546] (-) TimerEvent: {}
[30.234981] (-) TimerEvent: {}
[30.335401] (-) TimerEvent: {}
[30.435935] (-) TimerEvent: {}
[30.536538] (-) TimerEvent: {}
[30.636980] (-) TimerEvent: {}
[30.737522] (-) TimerEvent: {}
[30.838030] (-) TimerEvent: {}
[30.938645] (-) TimerEvent: {}
[31.039255] (-) TimerEvent: {}
[31.140259] (-) TimerEvent: {}
[31.240776] (-) TimerEvent: {}
[31.341279] (-) TimerEvent: {}
[31.441883] (-) TimerEvent: {}
[31.542331] (-) TimerEvent: {}
[31.642813] (-) TimerEvent: {}
[31.743327] (-) TimerEvent: {}
[31.844279] (-) TimerEvent: {}
[31.944813] (-) TimerEvent: {}
[32.045350] (-) TimerEvent: {}
[32.064388] (inertial_sense_ros2) JobEnded: {'identifier': 'inertial_sense_ros2', 'rc': 2}
[32.075782] (-) EventReactorShutdown: {}
